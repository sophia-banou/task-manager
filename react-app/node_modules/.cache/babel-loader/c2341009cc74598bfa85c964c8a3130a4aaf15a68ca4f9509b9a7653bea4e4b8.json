{"ast":null,"code":"var _jsxFileName = \"/Users/sophiabanou/Documents/code/test1/task-manager/src/components/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../css/TaskList.css';\nimport TaskListItem from './TaskListItem';\nimport { useTaskContext } from '../TaskContext'; // Ensure correct path\nimport TaskEditPopup from './EditPopup';\nimport TaskPopup from './AddPopup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const {\n    filteredTasks,\n    toggleTaskCompletion,\n    filter\n  } = useTaskContext();\n  const [editingTask, setEditingTask] = useState(null);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [showCompleted, setShowCompleted] = useState(true); // State to manage visibility of completed tasks\n\n  const completedTasks = filteredTasks.filter(task => task.completed);\n  const incompleteTasks = filteredTasks.filter(task => !task.completed);\n  const handleEditClick = task => {\n    setEditingTask(task);\n  };\n  const handleClosePopup = () => {\n    setEditingTask(null);\n  };\n  const handleOpenPopup = () => {\n    setIsPopupOpen(true);\n  };\n  const handleClosePopupAdd = () => {\n    setIsPopupOpen(false);\n  };\n  const toggleCompletedTasks = () => {\n    setShowCompleted(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: \"Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleCompletedTasks,\n        className: \"toggle-button\",\n        children: showCompleted ? 'Hide Completed Tasks' : 'Show Completed Tasks'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), filteredTasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-tasks-div\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-tasks\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-tasks-text\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"nt-title\",\n            style: {\n              fontSize: '40px'\n            },\n            children: \"No Tasks Available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: '30px'\n            },\n            children: \"It looks like you don't have any tasks yet. Create your first task to get started!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-task\",\n          onClick: handleOpenPopup,\n          children: [\"Add Task\", /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"add.png\",\n            alt: \"Add Icon\",\n            className: \"add-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasks-div\",\n      children: [(filter === 'All' || filter === 'Incomplete') && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tasks-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tasks-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Incomplete Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"tasks-list\",\n          children: incompleteTasks.map(task => /*#__PURE__*/_jsxDEV(TaskListItem, {\n            task: task,\n            onCheckboxChange: toggleTaskCompletion,\n            onEditClick: handleEditClick\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }, this), (filter === 'All' || filter === 'Complete') && showCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tasks-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tasks-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Completed Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"tasks-list\",\n          children: completedTasks.map(task => /*#__PURE__*/_jsxDEV(TaskListItem, {\n            task: task,\n            onCheckboxChange: toggleTaskCompletion,\n            onEditClick: handleEditClick\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }, this), editingTask && /*#__PURE__*/_jsxDEV(TaskEditPopup, {\n        task: editingTask,\n        onClose: handleClosePopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }, this), isPopupOpen && /*#__PURE__*/_jsxDEV(TaskPopup, {\n        onClose: handleClosePopupAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskList, \"SBBWn//gi5xNydZnSnXQ92idgnk=\", false, function () {\n  return [useTaskContext];\n});\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","TaskListItem","useTaskContext","TaskEditPopup","TaskPopup","jsxDEV","_jsxDEV","TaskList","_s","filteredTasks","toggleTaskCompletion","filter","editingTask","setEditingTask","isPopupOpen","setIsPopupOpen","showCompleted","setShowCompleted","completedTasks","task","completed","incompleteTasks","handleEditClick","handleClosePopup","handleOpenPopup","handleClosePopupAdd","toggleCompletedTasks","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","style","fontSize","src","alt","map","onCheckboxChange","onEditClick","id","onClose","_c","$RefreshReg$"],"sources":["/Users/sophiabanou/Documents/code/test1/task-manager/src/components/TaskList.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../css/TaskList.css';\nimport TaskListItem from './TaskListItem';\nimport { useTaskContext } from '../TaskContext'; // Ensure correct path\nimport TaskEditPopup from './EditPopup';\nimport TaskPopup from './AddPopup';\n\nconst TaskList = () => {\n    const { filteredTasks, toggleTaskCompletion, filter } = useTaskContext();\n    const [editingTask, setEditingTask] = useState(null);\n    const [isPopupOpen, setIsPopupOpen] = useState(false);\n    const [showCompleted, setShowCompleted] = useState(true); // State to manage visibility of completed tasks\n\n    const completedTasks = filteredTasks.filter(task => task.completed);\n    const incompleteTasks = filteredTasks.filter(task => !task.completed);\n\n    const handleEditClick = (task) => {\n        setEditingTask(task);\n    };\n\n    const handleClosePopup = () => {\n        setEditingTask(null);\n    };\n\n    const handleOpenPopup = () => {\n        setIsPopupOpen(true);\n    };\n\n    const handleClosePopupAdd = () => {\n        setIsPopupOpen(false);\n    };\n\n    const toggleCompletedTasks = () => {\n        setShowCompleted(prev => !prev);\n    };\n\n    return (\n        <div className=\"main-div\">\n            <div className=\"title-div\">\n                <h2 className='title'>Tasks</h2>\n                {/* Button to toggle completed tasks */}\n                <button onClick={toggleCompletedTasks} className=\"toggle-button\">\n                    {showCompleted ? 'Hide Completed Tasks' : 'Show Completed Tasks'}\n                </button>\n            </div>\n            {filteredTasks.length === 0 ? (\n                <div className='no-tasks-div'>\n                    <div className=\"no-tasks\">\n                        <div className='no-tasks-text'>\n                            <span className='nt-title' style={{ fontSize: '40px' }}>No Tasks Available</span>\n                            <p style={{ fontSize: '30px' }}>It looks like you don't have any tasks yet. Create your first task to get started!</p>\n                        </div>\n                        <button className=\"add-task\" onClick={handleOpenPopup}>\n                            Add Task\n                            <img src=\"add.png\" alt=\"Add Icon\" className='add-icon' />\n                        </button>\n                    </div>\n                </div>\n            ) : (\n                <div className='tasks-div'>\n                    {/* Conditionally render the incomplete tasks section */}\n                    {(filter === 'All' || filter === 'Incomplete') && (\n                        <div className=\"tasks-container\">\n                            <div className=\"tasks-header\">\n                                <h2>Incomplete Tasks</h2>\n                            </div>\n                            <ul className=\"tasks-list\">\n                                {incompleteTasks.map(task => (\n                                    <TaskListItem key={task.id} task={task} onCheckboxChange={toggleTaskCompletion} onEditClick={handleEditClick} />\n                                ))}\n                            </ul>\n                        </div>\n                    )}\n\n                    {/* Conditionally render the completed tasks section based on state */}\n                    {(filter === 'All' || filter === 'Complete') && showCompleted && (\n                        <div className=\"tasks-container\">\n                            <div className=\"tasks-header\">\n                                <h2>Completed Tasks</h2>\n                            </div>\n                            <ul className=\"tasks-list\">\n                                {completedTasks.map(task => (\n                                    <TaskListItem key={task.id} task={task} onCheckboxChange={toggleTaskCompletion} onEditClick={handleEditClick} />\n                                ))}\n                            </ul>\n                        </div>\n                    )}\n\n                    {editingTask && (\n                        <TaskEditPopup\n                            task={editingTask}\n                            onClose={handleClosePopup}\n                        />\n                    )}\n                    {isPopupOpen && <TaskPopup onClose={handleClosePopupAdd} />}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default TaskList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}