{"ast":null,"code":"var _jsxFileName = \"/Users/sophiabanou/Documents/code/test1/task-manager/src/components/AddPopup.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useTaskContext } from '../TaskContext';\nimport '../css/AddPopup.css'; // Make sure to create this CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskPopup = ({\n  onClose\n}) => {\n  _s();\n  const {\n    addTask\n  } = useTaskContext();\n  const [taskTitle, setTaskTitle] = useState('');\n  const [taskDescription, setTaskDescription] = useState('');\n  const handleAddTask = () => {\n    if (!taskTitle.trim()) return; // Prevent adding tasks without a title\n\n    const newTask = {\n      id: Date.now(),\n      title: taskTitle,\n      description: taskDescription,\n      completed: false\n    };\n    addTask(newTask);\n    setTaskTitle('');\n    setTaskDescription('');\n    onClose(); // Close the popup after adding the task\n  };\n  const titleInputRef = useRef(null);\n  useEffect(() => {\n    // Focus the input field when the component mounts\n    if (titleInputRef.current) {\n      titleInputRef.current.focus();\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-popup-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-popup-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-top\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-popup-close\",\n          onClick: onClose,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"close.png\",\n            alt: \"Close Icon\",\n            className: \"close-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Task title e.g. walk the dog\",\n          value: taskTitle,\n          onChange: e => setTaskTitle(e.target.value),\n          className: \"input-title\",\n          ref: titleInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-middle\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          placeholder: \"Task description (optional)\",\n          value: taskDescription,\n          onChange: e => setTaskDescription(e.target.value),\n          className: \"description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-bot\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddTask,\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskPopup, \"jPlblTxDClx6NMSUj+IBGP1zrGY=\", false, function () {\n  return [useTaskContext];\n});\n_c = TaskPopup;\nexport default TaskPopup;\nvar _c;\n$RefreshReg$(_c, \"TaskPopup\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useTaskContext","jsxDEV","_jsxDEV","TaskPopup","onClose","_s","addTask","taskTitle","setTaskTitle","taskDescription","setTaskDescription","handleAddTask","trim","newTask","id","Date","now","title","description","completed","titleInputRef","current","focus","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","ref","_c","$RefreshReg$"],"sources":["/Users/sophiabanou/Documents/code/test1/task-manager/src/components/AddPopup.js"],"sourcesContent":["import React, { useState , useRef, useEffect} from 'react';\nimport { useTaskContext } from '../TaskContext';\nimport '../css/AddPopup.css'; // Make sure to create this CSS file\n\nconst TaskPopup = ({ onClose }) => {\n    const { addTask } = useTaskContext();\n    const [taskTitle, setTaskTitle] = useState('');\n    const [taskDescription, setTaskDescription] = useState('');\n\n    const handleAddTask = () => {\n        if (!taskTitle.trim()) return; // Prevent adding tasks without a title\n\n        const newTask = {\n            id: Date.now(),\n            title: taskTitle,\n            description: taskDescription,\n            completed: false\n        };\n        addTask(newTask);\n        setTaskTitle('');\n        setTaskDescription('');\n        onClose(); // Close the popup after adding the task\n    };\n    const titleInputRef = useRef(null);\n\n    useEffect(() => {\n        // Focus the input field when the component mounts\n        if (titleInputRef.current) {\n            titleInputRef.current.focus();\n        }\n    }, []);\n\n    return (\n        <div className=\"task-popup-overlay\">\n            <div className=\"task-popup-content\">\n                <div className=\"popup-top\">\n                    <div className=\"task-popup-close\" onClick={onClose}>\n                        <img src=\"close.png\" alt=\"Close Icon\" className=\"close-button\"></img>\n                    </div>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Task title e.g. walk the dog\"\n                        value={taskTitle}\n                        onChange={(e) => setTaskTitle(e.target.value)}\n                        className='input-title'\n                        ref={titleInputRef}\n                    />\n                </div>\n                <div className=\"popup-middle\">\n                <textarea\n                    type=\"text\"\n                    placeholder=\"Task description (optional)\"\n                    value={taskDescription}\n                    onChange={(e) => setTaskDescription(e.target.value)}\n                    className='description'\n                />\n                </div>\n                <div className=\"popup-bot\">\n                <button onClick={handleAddTask}>Add Task</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TaskPopup;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}