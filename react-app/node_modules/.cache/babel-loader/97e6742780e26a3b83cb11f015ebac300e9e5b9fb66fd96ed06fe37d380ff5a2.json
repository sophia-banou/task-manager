{"ast":null,"code":"var _jsxFileName = \"/Users/sophiabanou/Documents/code/test1/task-manager/src/components/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../css/TaskList.css';\nimport TaskListItem from './TaskListItem';\nimport { useTaskContext } from '../TaskContext'; // Ensure correct path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const {\n    filteredTasks,\n    toggleTaskCompletion,\n    filter\n  } = useTaskContext();\n  const [editingTask, setEditingTask] = useState(null);\n\n  // Filter tasks based on their completion status\n  const completedTasks = filteredTasks.filter(task => task.completed);\n  const incompleteTasks = filteredTasks.filter(task => !task.completed);\n  const handleEditClick = task => {\n    setEditingTask(task);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title-div\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: \"Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasks-div\",\n      children: [(filter === 'All' || filter === 'Incomplete') && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tasks-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tasks-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Incomplete Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"tasks-list\",\n          children: incompleteTasks.map(task => /*#__PURE__*/_jsxDEV(TaskListItem, {\n            task: task,\n            onCheckboxChange: toggleTaskCompletion,\n            onEditClick: handleEditClick\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }, this), (filter === 'All' || filter === 'Complete') && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tasks-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tasks-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Completed Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"tasks-list\",\n          children: completedTasks.map(task => /*#__PURE__*/_jsxDEV(TaskListItem, {\n            task: task,\n            onCheckboxChange: toggleTaskCompletion,\n            onEditClick: handleEditClick\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskList, \"B6/igCfI7YvvM97A1oY4O/conDQ=\", false, function () {\n  return [useTaskContext];\n});\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","TaskListItem","useTaskContext","jsxDEV","_jsxDEV","TaskList","_s","filteredTasks","toggleTaskCompletion","filter","editingTask","setEditingTask","completedTasks","task","completed","incompleteTasks","handleEditClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onCheckboxChange","onEditClick","id","_c","$RefreshReg$"],"sources":["/Users/sophiabanou/Documents/code/test1/task-manager/src/components/TaskList.js"],"sourcesContent":["import React, {useState} from 'react';\nimport '../css/TaskList.css';\nimport TaskListItem from './TaskListItem';\nimport { useTaskContext } from '../TaskContext'; // Ensure correct path\n\nconst TaskList = () => {\n    const { filteredTasks, toggleTaskCompletion, filter } = useTaskContext();\n    const [editingTask, setEditingTask] = useState(null);\n\n    // Filter tasks based on their completion status\n    const completedTasks = filteredTasks.filter(task => task.completed);\n    const incompleteTasks = filteredTasks.filter(task => !task.completed);\n\n    const handleEditClick = (task) => {\n        setEditingTask(task);\n    };\n\n    return (\n        <div className=\"main-div\">\n            <div className=\"title-div\">\n                <h2 className='title'>Tasks</h2>\n            </div>\n            <div className='tasks-div'>\n                {/* Conditionally render the incomplete tasks section */}\n                {(filter === 'All' || filter === 'Incomplete') && (\n                    <div className=\"tasks-container\">\n                        <div className=\"tasks-header\">\n                            <h2>Incomplete Tasks</h2>\n                        </div>\n                        <ul className=\"tasks-list\">\n                            {incompleteTasks.map(task => (\n                                <TaskListItem key={task.id} task={task} onCheckboxChange={toggleTaskCompletion} onEditClick={handleEditClick} />\n                            ))}\n                        </ul>\n                    </div>\n                )}\n\n                {/* Conditionally render the completed tasks section */}\n                {(filter === 'All' || filter === 'Complete') && (\n                    <div className=\"tasks-container\">\n                        <div className=\"tasks-header\">\n                            <h2>Completed Tasks</h2>\n                        </div>\n                        <ul className=\"tasks-list\">\n                            {completedTasks.map(task => (\n                                <TaskListItem key={task.id} task={task} onCheckboxChange={toggleTaskCompletion} onEditClick={handleEditClick}/>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default TaskList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}