{"ast":null,"code":"var _jsxFileName = \"/Users/sophiabanou/Documents/code-2/task-manager/react-app/src/context/TaskContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskContext = /*#__PURE__*/createContext();\nexport const TaskProvider = props => {\n  _s();\n  // Initialize tasks state, load from localStorage if available.\n  const [tasks, setTasks] = useState(() => {\n    const savedTasks = localStorage.getItem('tasks');\n    return savedTasks ? JSON.parse(savedTasks) : [];\n  });\n\n  // State to control the sidebar visibility\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n\n  // State to control the current filter for the tasks\n  const [filter, setFilter] = useState('All');\n\n  // Filtered tasks based on current filter\n  const filteredTasks = tasks.filter(task => {\n    if (filter === 'All') return true;\n    if (filter === 'Incomplete') return !task.completed;\n    if (filter === 'Complete') return task.completed;\n    return false;\n  });\n\n  // useEffect to save tasks to localStorage whenever tasks state changes\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  // Function to toggle the completion status of a task\n  const toggleTaskCompletion = id => {\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task));\n  };\n  const value = {\n    tasks,\n    setTasks,\n    filter,\n    setFilter,\n    filteredTasks,\n    toggleTaskCompletion,\n    isSidebarOpen,\n    setIsSidebarOpen\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: value,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to use the TaskContext in components\n_s(TaskProvider, \"5P3HOU/vKPMKDx1hOTcffZ96X/Q=\");\n_c = TaskProvider;\nexport const useTaskContext = () => {\n  _s2();\n  return useContext(TaskContext);\n};\n_s2(useTaskContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","TaskContext","TaskProvider","props","_s","tasks","setTasks","savedTasks","localStorage","getItem","JSON","parse","isSidebarOpen","setIsSidebarOpen","filter","setFilter","filteredTasks","task","completed","setItem","stringify","toggleTaskCompletion","id","map","value","Provider","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTaskContext","_s2","$RefreshReg$"],"sources":["/Users/sophiabanou/Documents/code-2/task-manager/react-app/src/context/TaskContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\nconst TaskContext = createContext();\n\nexport const TaskProvider = props => {\n    // Initialize tasks state, load from localStorage if available.\n    const [tasks, setTasks] = useState(() => {\n        const savedTasks = localStorage.getItem('tasks');\n        return savedTasks ? JSON.parse(savedTasks) : [];\n    });\n\n    // State to control the sidebar visibility\n    const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n   \n    // State to control the current filter for the tasks\n    const [filter, setFilter] = useState('All');\n\n    // Filtered tasks based on current filter\n    const filteredTasks = tasks.filter(task => {\n        if (filter === 'All') return true;\n        if (filter === 'Incomplete') return !task.completed;\n        if (filter === 'Complete') return task.completed;\n        return false;\n    });\n\n    // useEffect to save tasks to localStorage whenever tasks state changes\n    useEffect(() => {\n        localStorage.setItem('tasks', JSON.stringify(tasks));\n    }, [tasks]);\n\n    // Function to toggle the completion status of a task\n    const toggleTaskCompletion = (id) => {\n        setTasks(tasks.map(task =>\n            task.id === id ? { ...task, completed: !task.completed } : task\n        ));\n    };\n\n    const value = {\n        tasks,\n        setTasks,\n        filter,\n        setFilter,\n        filteredTasks,\n        toggleTaskCompletion,\n        isSidebarOpen,\n        setIsSidebarOpen,\n    };\n\n    return (\n        <TaskContext.Provider value={value}>\n            {props.children}\n        </TaskContext.Provider>\n    );\n};\n\n// Custom hook to use the TaskContext in components\nexport const useTaskContext = () => useContext(TaskContext);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGC,KAAK,IAAI;EAAAC,EAAA;EACjC;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,MAAM;IACrC,MAAMW,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,OAAOF,UAAU,GAAGG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,GAAG,EAAE;EACnD,CAAC,CAAC;;EAEF;EACA,MAAM,CAACK,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACA,MAAM,CAACkB,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;;EAE3C;EACA,MAAMoB,aAAa,GAAGX,KAAK,CAACS,MAAM,CAACG,IAAI,IAAI;IACvC,IAAIH,MAAM,KAAK,KAAK,EAAE,OAAO,IAAI;IACjC,IAAIA,MAAM,KAAK,YAAY,EAAE,OAAO,CAACG,IAAI,CAACC,SAAS;IACnD,IAAIJ,MAAM,KAAK,UAAU,EAAE,OAAOG,IAAI,CAACC,SAAS;IAChD,OAAO,KAAK;EAChB,CAAC,CAAC;;EAEF;EACApB,SAAS,CAAC,MAAM;IACZU,YAAY,CAACW,OAAO,CAAC,OAAO,EAAET,IAAI,CAACU,SAAS,CAACf,KAAK,CAAC,CAAC;EACxD,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMgB,oBAAoB,GAAIC,EAAE,IAAK;IACjChB,QAAQ,CAACD,KAAK,CAACkB,GAAG,CAACN,IAAI,IACnBA,IAAI,CAACK,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGL,IAAI;MAAEC,SAAS,EAAE,CAACD,IAAI,CAACC;IAAU,CAAC,GAAGD,IAC/D,CAAC,CAAC;EACN,CAAC;EAED,MAAMO,KAAK,GAAG;IACVnB,KAAK;IACLC,QAAQ;IACRQ,MAAM;IACNC,SAAS;IACTC,aAAa;IACbK,oBAAoB;IACpBT,aAAa;IACbC;EACJ,CAAC;EAED,oBACIb,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAE,QAAA,EAC9BvB,KAAK,CAACuB;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAE/B,CAAC;;AAED;AAAA1B,EAAA,CAnDaF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAoDzB,OAAO,MAAM8B,cAAc,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMpC,UAAU,CAACI,WAAW,CAAC;AAAA;AAACgC,GAAA,CAA/CD,cAAc;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}